---
- name: Enhanced Directory Builder for DevOps Projects
  hosts: localhost
  vars:
    base_dir: "{{ playbook_dir }}"
    log_file: "{{ base_dir }}/directory-builder.log"
    categories_tools_map:
      DevOps: "Kubernetes Docker Ansible HashiCorp-Vault HashiCorp-Terraform HashiCorp-Nomad HashiCorp-Consul HashiCorp-Packer HashiCorp-Vagrant HashiCorp-Boundary HashiCorp-Waypoint GoogleWorkspace Helm Git"
      WebDev: "HTML CSS JavaScript Node.js TypeScript React"
      MobileDev: "Flutter Dart Swift Kotlin"
      Cloud: "AWS GCP Linode DigitalOcean Azure CloudFlare Heroku RedisCloud"
      GameDev: "UnrealEngine5 Flame-Engine"
      InfoSec: "Detection&Response Observability OSINT Firewalls Fortinet Snyk"
      CI_CD: "Jenkins GitHubActions GitLabCI BambooCI"
      Monitoring: "Prometheus Grafana ELK Splunk Datadog PagerDuty NewRelic"
      Scripting: "Shell Python PowerShell GoLang Sed-Awk"
      Vim: "VimScripts VimShortcuts"
      Database: "MySQL MongoDB Postgres Redis AWS-RDS AWS-DynamoDB GCP-CloudSQL GCP-Firestore GCP-Bigtable Azure-SQLDatabase Azure-CosmosDB"
      Networking: "DNS SSH FTP SFTP NetworkingTools VPN WireGuard"
      Shell_One_Liners: "FTP SFTP DNS SSH Git Other-Shell-Utilities"
      # ... [Include all other categories here]
    default_file_permissions: '0644'
    default_directory_permissions: '0755'
    default_owner: 'root'
    default_group: 'root'
  
  tasks:
    - name: Validate categories_tools_map structure
      assert:
        that:
          - categories_tools_map is mapping
          - categories_tools_map | length > 0
        fail_msg: "categories_tools_map must be a non-empty dictionary"

    - name: Create directory structure
      vars:
        category: "{{ item.key }}"
        tools: "{{ item.value }}"
      block:
        - name: Create directories based on categories and tools
          file:
            path: "{{ base_dir }}/{{ category }}/{{ tool }}"
            state: directory
            mode: "{{ default_directory_permissions }}"
            owner: "{{ default_owner }}"
            group: "{{ default_group }}"
          loop: "{{ tools.split(' ') }}"
          loop_control:
            loop_var: tool

        - name: Add placeholder files if not exists
          copy:
            content: ""
            dest: "{{ base_dir }}/{{ category }}/{{ tool }}/{{ item }}"
            mode: "{{ default_file_permissions }}"
            owner: "{{ default_owner }}"
            group: "{{ default_group }}"
          loop:
            - "README.md"
            - ".gitignore"
            - "placeholder.txt"

      loop: "{{ categories_tools_map | dict2items }}"
      rescue:
        - name: Log failed category
          debug:
            msg: "Failed to process category {{ category }}"
          # Add your logging mechanism here, for example, a custom module or local_action
          # local_action: shell echo "Failed to process category {{ category }}" >> {{ log_file }}

      # To avoid playbook failure on first error and attempt remaining items
      ignore_errors: yes

